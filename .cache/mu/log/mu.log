2020-05-25 10:49:36,377 - root:112(run) INFO: 

-----------------

Starting Mu 1.0.2
2020-05-25 10:49:36,378 - root:113(run) INFO: uname_result(system='Linux', node='raspberrypi', release='4.19.97-v7l+', version='#1294 SMP Thu Jan 30 13:21:14 GMT 2020', machine='armv7l', processor='')
2020-05-25 10:49:36,378 - root:114(run) INFO: Python path: ['/usr/share/mu-editor', '/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/home/pi/.local/lib/python3.7/site-packages', '/usr/local/lib/python3.7/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3/dist-packages/IPython/extensions']
2020-05-25 10:49:36,378 - root:115(run) INFO: Language code: en_ZA
2020-05-25 10:49:37,307 - mu.logic:543(__init__) INFO: Setting up editor.
2020-05-25 10:49:37,308 - mu.logic:562(__init__) INFO: Settings path: /home/pi/.local/share/mu/settings.json
2020-05-25 10:49:37,309 - mu.logic:563(__init__) INFO: Session path: /home/pi/.local/share/mu/session.json
2020-05-25 10:49:37,309 - mu.logic:564(__init__) INFO: Log directory: /home/pi/.cache/mu/log
2020-05-25 10:49:37,309 - mu.logic:565(__init__) INFO: Data directory: /home/pi/.local/share/mu
2020-05-25 10:49:37,363 - mu.logic:578(setup) INFO: Available modes: python, adafruit, microbit, debugger, pygamezero
2020-05-25 10:49:37,633 - mu.logic:1148(change_mode) INFO: Workspace directory: /home/pi/mu_code
2020-05-25 10:49:37,635 - mu.logic:625(restore_session) INFO: Restoring session from: /home/pi/.local/share/mu/session.json
2020-05-25 10:49:37,635 - mu.logic:626(restore_session) DEBUG: {}
2020-05-25 10:49:37,635 - mu.logic:1105(select_mode) INFO: Showing available modes: ['python', 'adafruit', 'microbit', 'debugger', 'pygamezero']
2020-05-25 10:49:39,443 - mu.logic:843(load_cli) INFO: Passed-in filename: /home/pi/test/test.py
2020-05-25 10:49:39,444 - mu.logic:713(_load) INFO: Loading script from: /home/pi/test/test.py
2020-05-25 10:49:39,445 - mu.logic:274(read_and_decode) DEBUG: Trying to decode with utf-8
2020-05-25 10:49:39,447 - mu.logic:277(read_and_decode) INFO: Decoded with utf-8
2020-05-25 10:49:39,453 - mu.logic:290(read_and_decode) DEBUG: Detected newline '\n'
2020-05-25 10:49:39,454 - mu.logic:787(_load) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(60)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(60)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        print(hx.get_weight_mean(60), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()
2020-05-25 10:49:39,673 - mu.logic:1148(change_mode) INFO: Workspace directory: /home/pi/mu_code
2020-05-25 10:49:41,350 - mu.logic:1051(quit) DEBUG: Session: {'theme': 'day', 'mode': 'python', 'paths': ['/home/pi/test/test.py'], 'envars': [], 'minify': False, 'microbit_runtime': '', 'zoom_level': 2}
2020-05-25 10:49:41,351 - mu.logic:1052(quit) DEBUG: Saving session to: /home/pi/.local/share/mu/session.json
2020-05-25 10:49:41,352 - mu.logic:1066(quit) INFO: Quitting.


2020-05-25 10:53:01,282 - root:112(run) INFO: 

-----------------

Starting Mu 1.0.2
2020-05-25 10:53:01,283 - root:113(run) INFO: uname_result(system='Linux', node='raspberrypi', release='4.19.97-v7l+', version='#1294 SMP Thu Jan 30 13:21:14 GMT 2020', machine='armv7l', processor='')
2020-05-25 10:53:01,284 - root:114(run) INFO: Python path: ['/usr/share/mu-editor', '/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/home/pi/.local/lib/python3.7/site-packages', '/usr/local/lib/python3.7/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3/dist-packages/IPython/extensions']
2020-05-25 10:53:01,284 - root:115(run) INFO: Language code: en_ZA
2020-05-25 10:53:02,233 - mu.logic:543(__init__) INFO: Setting up editor.
2020-05-25 10:53:02,234 - mu.logic:562(__init__) INFO: Settings path: /home/pi/.local/share/mu/settings.json
2020-05-25 10:53:02,234 - mu.logic:563(__init__) INFO: Session path: /home/pi/.local/share/mu/session.json
2020-05-25 10:53:02,235 - mu.logic:564(__init__) INFO: Log directory: /home/pi/.cache/mu/log
2020-05-25 10:53:02,235 - mu.logic:565(__init__) INFO: Data directory: /home/pi/.local/share/mu
2020-05-25 10:53:02,290 - mu.logic:578(setup) INFO: Available modes: python, adafruit, microbit, debugger, pygamezero
2020-05-25 10:53:02,589 - mu.logic:1148(change_mode) INFO: Workspace directory: /home/pi/mu_code
2020-05-25 10:53:02,591 - mu.logic:625(restore_session) INFO: Restoring session from: /home/pi/.local/share/mu/session.json
2020-05-25 10:53:02,591 - mu.logic:626(restore_session) DEBUG: {'theme': 'day', 'mode': 'python', 'paths': ['/home/pi/test/test.py'], 'envars': [], 'minify': False, 'microbit_runtime': '', 'zoom_level': 2}
2020-05-25 10:53:02,592 - mu.logic:647(restore_session) INFO: Loaded files.
2020-05-25 10:53:02,592 - mu.logic:651(restore_session) INFO: User defined environment variables: []
2020-05-25 10:53:02,592 - mu.logic:655(restore_session) INFO: Minify scripts on micro:bit? False
2020-05-25 10:53:02,592 - mu.logic:843(load_cli) INFO: Passed-in filename: /home/pi/test/test.py
2020-05-25 10:53:02,593 - mu.logic:713(_load) INFO: Loading script from: /home/pi/test/test.py
2020-05-25 10:53:02,593 - mu.logic:274(read_and_decode) DEBUG: Trying to decode with utf-8
2020-05-25 10:53:02,594 - mu.logic:277(read_and_decode) INFO: Decoded with utf-8
2020-05-25 10:53:02,595 - mu.logic:290(read_and_decode) DEBUG: Detected newline '\n'
2020-05-25 10:53:02,596 - mu.logic:787(_load) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(60)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(60)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        print(hx.get_weight_mean(60), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()
2020-05-25 10:53:02,794 - mu.logic:1148(change_mode) INFO: Workspace directory: /home/pi/mu_code
2020-05-25 10:53:04,681 - mu.logic:1051(quit) DEBUG: Session: {'theme': 'day', 'mode': 'python', 'paths': ['/home/pi/test/test.py'], 'envars': [], 'minify': False, 'microbit_runtime': '', 'zoom_level': 2}
2020-05-25 10:53:04,681 - mu.logic:1052(quit) DEBUG: Saving session to: /home/pi/.local/share/mu/session.json
2020-05-25 10:53:04,682 - mu.logic:1066(quit) INFO: Quitting.


