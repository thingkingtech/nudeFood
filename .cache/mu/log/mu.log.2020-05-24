2020-05-24 15:19:07,222 - root:112(run) INFO: 

-----------------

Starting Mu 1.0.2
2020-05-24 15:19:07,223 - root:113(run) INFO: uname_result(system='Linux', node='raspberrypi', release='4.19.97-v7l+', version='#1294 SMP Thu Jan 30 13:21:14 GMT 2020', machine='armv7l', processor='')
2020-05-24 15:19:07,223 - root:114(run) INFO: Python path: ['/usr/share/mu-editor', '/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/home/pi/.local/lib/python3.7/site-packages', '/usr/local/lib/python3.7/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3/dist-packages/IPython/extensions']
2020-05-24 15:19:07,223 - root:115(run) INFO: Language code: en_ZA
2020-05-24 15:19:08,137 - mu.logic:543(__init__) INFO: Setting up editor.
2020-05-24 15:19:08,137 - mu.logic:560(__init__) DEBUG: Creating directory: /home/pi/.local/share/mu
2020-05-24 15:19:08,138 - mu.logic:316(get_admin_file_path) DEBUG: Creating admin file: /home/pi/.local/share/mu/settings.json
2020-05-24 15:19:08,138 - mu.logic:562(__init__) INFO: Settings path: /home/pi/.local/share/mu/settings.json
2020-05-24 15:19:08,138 - mu.logic:316(get_admin_file_path) DEBUG: Creating admin file: /home/pi/.local/share/mu/session.json
2020-05-24 15:19:08,139 - mu.logic:563(__init__) INFO: Session path: /home/pi/.local/share/mu/session.json
2020-05-24 15:19:08,139 - mu.logic:564(__init__) INFO: Log directory: /home/pi/.cache/mu/log
2020-05-24 15:19:08,139 - mu.logic:565(__init__) INFO: Data directory: /home/pi/.local/share/mu
2020-05-24 15:19:08,195 - mu.logic:578(setup) INFO: Available modes: python, adafruit, microbit, debugger, pygamezero
2020-05-24 15:19:08,199 - mu.logic:582(setup) DEBUG: Creating directory: /home/pi/mu_code
2020-05-24 15:19:08,200 - mu.logic:590(setup) DEBUG: Creating directory: /home/pi/mu_code/images
2020-05-24 15:19:08,206 - mu.logic:597(setup) DEBUG: Creating directory: /home/pi/mu_code/fonts
2020-05-24 15:19:08,207 - mu.logic:600(setup) DEBUG: Creating directory: /home/pi/mu_code/sounds
2020-05-24 15:19:08,208 - mu.logic:603(setup) DEBUG: Creating directory: /home/pi/mu_code/music
2020-05-24 15:19:08,275 - root:112(run) INFO: 

-----------------

Starting Mu 1.0.2
2020-05-24 15:19:08,275 - root:113(run) INFO: uname_result(system='Linux', node='raspberrypi', release='4.19.97-v7l+', version='#1294 SMP Thu Jan 30 13:21:14 GMT 2020', machine='armv7l', processor='')
2020-05-24 15:19:08,275 - root:114(run) INFO: Python path: ['/usr/share/mu-editor', '/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/home/pi/.local/lib/python3.7/site-packages', '/usr/local/lib/python3.7/dist-packages', '/usr/lib/python3/dist-packages', '/usr/lib/python3/dist-packages/IPython/extensions']
2020-05-24 15:19:08,275 - root:115(run) INFO: Language code: en_ZA
2020-05-24 15:19:08,466 - mu.logic:1148(change_mode) INFO: Workspace directory: /home/pi/mu_code
2020-05-24 15:19:08,467 - mu.logic:625(restore_session) INFO: Restoring session from: /home/pi/.local/share/mu/session.json
2020-05-24 15:19:08,469 - mu.logic:626(restore_session) DEBUG: {}
2020-05-24 15:19:08,470 - mu.logic:1105(select_mode) INFO: Showing available modes: ['python', 'adafruit', 'microbit', 'debugger', 'pygamezero']
2020-05-24 15:19:08,917 - mu.logic:543(__init__) INFO: Setting up editor.
2020-05-24 15:19:08,918 - mu.logic:562(__init__) INFO: Settings path: /home/pi/.local/share/mu/settings.json
2020-05-24 15:19:08,918 - mu.logic:563(__init__) INFO: Session path: /home/pi/.local/share/mu/session.json
2020-05-24 15:19:08,918 - mu.logic:564(__init__) INFO: Log directory: /home/pi/.cache/mu/log
2020-05-24 15:19:08,918 - mu.logic:565(__init__) INFO: Data directory: /home/pi/.local/share/mu
2020-05-24 15:19:08,968 - mu.logic:578(setup) INFO: Available modes: python, adafruit, microbit, debugger, pygamezero
2020-05-24 15:19:09,089 - mu.logic:1148(change_mode) INFO: Workspace directory: /home/pi/mu_code
2020-05-24 15:19:09,090 - mu.logic:625(restore_session) INFO: Restoring session from: /home/pi/.local/share/mu/session.json
2020-05-24 15:19:09,090 - mu.logic:626(restore_session) DEBUG: {}
2020-05-24 15:19:09,091 - mu.logic:1105(select_mode) INFO: Showing available modes: ['python', 'adafruit', 'microbit', 'debugger', 'pygamezero']
2020-05-24 15:19:11,307 - mu.logic:843(load_cli) INFO: Passed-in filename: /home/pi/test/test2.py
2020-05-24 15:19:11,307 - mu.logic:713(_load) INFO: Loading script from: /home/pi/test/test2.py
2020-05-24 15:19:11,308 - mu.logic:274(read_and_decode) DEBUG: Trying to decode with utf-8
2020-05-24 15:19:11,309 - mu.logic:277(read_and_decode) INFO: Decoded with utf-8
2020-05-24 15:19:11,310 - mu.logic:290(read_and_decode) DEBUG: Detected newline '\n'
2020-05-24 15:19:11,311 - mu.logic:787(_load) DEBUG: #!/usr/bin/env python3
import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711
from hx711 import outliers_filter

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    # If you do not pass any argument 'gain_channel_A' then the default value is 128
    # If you do not pass any argument 'set_channel' then the default value is 'A'
    # you can set a gain for channel A even though you want to currently select channel B
    hx = HX711(
        dout_pin=5, pd_sck_pin=6, gain_channel_A=128, select_channel='B')

    err = hx.reset()  # Before we start, reset the hx711 ( not necessary)
    if err:  # you can check if the reset was successful
        print('not ready')
    else:
        print('Ready to use')

    hx.set_gain_A(
        gain=64)  # You can change the gain for channel A  at any time.
    hx.select_channel(
        channel='A')  # Select desired channel. Either 'A' or 'B' at any time.

    # Read data several, or only one, time and return mean value
    # argument "readings" is not required default value is 30
    data = hx.get_raw_data_mean(readings=30)

    if data:  # always check if you get correct value or only False
        print('Raw data:', data)
    else:
        print('invalid data')

    # measure tare and save the value as offset for current channel
    # and gain selected. That means channel A and gain 64
    result = hx.zero(readings=30)

    # Read data several, or only one, time and return mean value.
    # It subtracts offset value for particular channel from the mean value.
    # This value is still just a number from HX711 without any conversion
    # to units such as grams or kg.
    data = hx.get_data_mean(readings=30)

    if data:  # always check if you get correct value or only False
        # now the value is close to 0
        print('Data subtracted by offset but still not converted to any unit:',
              data)
    else:
        print('invalid data')

    # In order to calculate the conversion ratio to some units, in my case I want grams,
    # you must have known weight.
    input('Put known weight on the scale and then press Enter')
    data = hx.get_data_mean(readings=30)
    if data:
        print('Mean value from HX711 subtracted by offset:', data)
        known_weight_grams = input(
            'Write how many grams it was and press Enter: ')
        try:
            value = float(known_weight_grams)
            print(value, 'grams')
        except ValueError:
            print('Expected integer or float and I have got:',
                  known_weight_grams)

        # set scale ratio for particular channel and gain which is
        # used to calculate the conversion to units. Required argument is only
        # scale ratio. Without arguments 'channel' and 'gain_A' it sets
        # the ratio for current channel and gain.
        ratio = data / value  # calculate the ratio for channel A and gain 64
        hx.set_scale_ratio(ratio)  # set ratio for current channel
        print('Ratio is set.')
    else:
        raise ValueError('Cannot calculate mean value. Try debug mode.')

    # Read data several, or only one, time and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print('Current weight on the scale in grams is: ')
    print(hx.get_weight_mean(30), 'g')

    # if you need the data fast without doing average or filtering them.
    # do some kind of loop and pass argument 'readings=1'. Default 'readings' is 30
    # be aware that HX711 sometimes return invalid or wrong data.
    # you can probably see it now
    print('Now I will print data quickly, but sometimes wrong.')
    input(
        'That is why I recommend always passing argument readings=20 or higher value'
    )
    for i in range(40):
        # the value will vary because it is only one immediate reading.
        # the default speed for hx711 is 10 samples per second
        print(hx.get_weight_mean(readings=1), 'g')

    # if you are not sure which gain is currently set on channel A you can call
    print('Current gain on channel A:', hx.get_current_gain_A())

    # to get currently selected channel
    print('Current channel is:', hx.get_current_channel())

    # to get current offset for a specific channel
    offset = hx.get_current_offset(channel='A', gain_A=128)
    print('Current offset for channel A and gain 128:', offset)
    # if no arguments passed then it return offset for the currently selected channel and gain
    offset = hx.get_current_offset()
    print('Current offset for channel A and the current gain (64):', offset)
    # for channel B
    offset = hx.get_current_offset(channel='B')
    print('Current offset for channel B:', offset)

    # to get current scale ratio
    current_ratio = hx.get_current_scale_ratio()
    print('Current scale ratio is set to:', current_ratio)

    # set offset manually for specific channel and gain. If you want to
    # set offset for channel B then argument 'gain_A' is not required
    # if no arguments 'channel' and 'gain_A' provided. The offset is
    # set for the current channel and gain. Such as:

    # hx.set_offset(offset=15000)

    input(
        'Now I will show you how it looks if you turn on debug mode. Press ENTER'
    )
    # turns on debug mode. It prints many things so you can find problem
    hx.set_debug_mode(flag=True)
    print(hx.get_raw_data_mean(
        4))  # now you can see many intermediate steps and values
    hx.set_debug_mode(False)

    #hx.power_down()        # turns off the hx711. Low power consumption
    #hx.power_up()            # turns on the hx711.
    #hx.reset()            # resets the hx711 and get it ready for
    # reading of the currently selected channel
    for i in range(2):
        # without argument 'readings' default is 30
        print('-> Weight channel A gain 64:', hx.get_weight_mean(20), 'g')
        print('-> Raw data channel A gain 64:', hx.get_raw_data_mean(20))
        print('--------------------------------------------')

        hx.set_gain_A(128)
        # without argument 'readings' default is 30
        print('-> Weight channel A gain 128:', hx.get_weight_mean(20), ' g')
        print('-> Raw data channel A gain 128:', hx.get_raw_data_mean(20))
        print('--------------------------------------------')
        
        hx.select_channel('B')
        print('Channel B selected')
        # without argument default is 1
        print('-> Weight channel B gain 32:', hx.get_weight_mean(20), 'g')
        print('-> Raw data channel B gain 32:', hx.get_raw_data_mean(20))
        
        # you can also get the last raw data read for each channel and gain without reading it again
        # without an argument it return raw data for currently set channel and gain, so channel B
        last_value = hx.get_last_raw_data()
        print('It remembers last raw data for channel B:', last_value)
        last_value = hx.get_last_raw_data(channel='A', gain_A=64)
        print('It remembers last raw data for channel A gain 64:', last_value)
        last_value = hx.get_last_raw_data(channel='A', gain_A=128)
        print('It remembers last raw data for channel A gain 128:', last_value)

    # To get the current data filter that is set
    current_filter = hx.get_data_filter()
    # To set a new data filter
    hx.set_data_filter(outliers_filter)
    # By default it is outliers_filter.
    # If you want to create your own filter, the requirement is simple.
    # It has to take a single argument that is a list of int and return list of int
    print('\nThat is all. Cleaning up.')
except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 15:19:11,525 - mu.logic:1148(change_mode) INFO: Workspace directory: /home/pi/mu_code
2020-05-24 15:39:51,690 - mu.logic:843(load_cli) INFO: Passed-in filename: /home/pi/test/test.py
2020-05-24 15:39:51,690 - mu.logic:713(_load) INFO: Loading script from: /home/pi/test/test.py
2020-05-24 15:39:51,691 - mu.logic:274(read_and_decode) DEBUG: Trying to decode with utf-8
2020-05-24 15:39:51,693 - mu.logic:277(read_and_decode) INFO: Decoded with utf-8
2020-05-24 15:39:51,694 - mu.logic:290(read_and_decode) DEBUG: Detected newline '\n'
2020-05-24 15:39:51,694 - mu.logic:787(_load) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        print(hx.get_weight_mean(20), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 15:39:51,874 - mu.logic:1148(change_mode) INFO: Workspace directory: /home/pi/mu_code
2020-05-24 16:31:21,971 - mu.logic:869(save_tab_to_file) INFO: Saving script to: /home/pi/test/test.py
2020-05-24 16:31:21,972 - mu.logic:870(save_tab_to_file) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        h

        print(hx.get_weight_mean(20), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 16:31:21,986 - mu.logic:1176(autosave) INFO: Autosave detected and saved changes in /home/pi/test/test.py.
2020-05-24 16:31:26,972 - mu.logic:869(save_tab_to_file) INFO: Saving script to: /home/pi/test/test.py
2020-05-24 16:31:26,973 - mu.logic:870(save_tab_to_file) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        hx.zero(10)

        print(hx.get_weight_mean(20), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 16:31:26,991 - mu.logic:1176(autosave) INFO: Autosave detected and saved changes in /home/pi/test/test.py.
2020-05-24 16:31:29,575 - mu.logic:869(save_tab_to_file) INFO: Saving script to: /home/pi/test/test.py
2020-05-24 16:31:29,575 - mu.logic:870(save_tab_to_file) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        hx.zero(10)

        print(hx.get_weight_mean(20), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 16:31:56,971 - mu.logic:869(save_tab_to_file) INFO: Saving script to: /home/pi/test/test.py
2020-05-24 16:31:56,972 - mu.logic:870(save_tab_to_file) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        hx.zero(30)

        print(hx.get_weight_mean(20), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 16:31:56,984 - mu.logic:1176(autosave) INFO: Autosave detected and saved changes in /home/pi/test/test.py.
2020-05-24 16:32:01,972 - mu.logic:869(save_tab_to_file) INFO: Saving script to: /home/pi/test/test.py
2020-05-24 16:32:01,972 - mu.logic:870(save_tab_to_file) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        hx.zero(30)

        print(hx.get_weight_mean(10), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 16:32:01,984 - mu.logic:1176(autosave) INFO: Autosave detected and saved changes in /home/pi/test/test.py.
2020-05-24 16:32:02,363 - mu.logic:869(save_tab_to_file) INFO: Saving script to: /home/pi/test/test.py
2020-05-24 16:32:02,364 - mu.logic:870(save_tab_to_file) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        hx.zero(30)

        print(hx.get_weight_mean(10), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 16:32:26,972 - mu.logic:869(save_tab_to_file) INFO: Saving script to: /home/pi/test/test.py
2020-05-24 16:32:26,974 - mu.logic:870(save_tab_to_file) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:

        print(hx.get_weight_mean(10), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 16:32:26,987 - mu.logic:1176(autosave) INFO: Autosave detected and saved changes in /home/pi/test/test.py.
2020-05-24 16:32:31,971 - mu.logic:869(save_tab_to_file) INFO: Saving script to: /home/pi/test/test.py
2020-05-24 16:32:31,972 - mu.logic:870(save_tab_to_file) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        print(hx.get_weight_mean(30), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

2020-05-24 16:32:31,982 - mu.logic:1176(autosave) INFO: Autosave detected and saved changes in /home/pi/test/test.py.
2020-05-24 16:32:32,543 - mu.logic:869(save_tab_to_file) INFO: Saving script to: /home/pi/test/test.py
2020-05-24 16:32:32,544 - mu.logic:870(save_tab_to_file) DEBUG: #!/usr/bin/env python3
import pickle
import os

import RPi.GPIO as GPIO  # import GPIO
from hx711 import HX711  # import the class HX711

try:
    GPIO.setmode(GPIO.BCM)  # set GPIO pin mode to BCM numbering
    # Create an object hx which represents your real hx711 chip
    # Required input parameters are only 'dout_pin' and 'pd_sck_pin'
    hx = HX711(dout_pin=5, pd_sck_pin=6)
    # Check if we have swap file. If yes that suggest that the program was not
    # terminated proprly (power failure). We load the latest state.
    swap_file_name = 'swap_file.swp'
    if os.path.isfile(swap_file_name):
        with open(swap_file_name, 'rb') as swap_file:
            hx = pickle.load(swap_file)
            # now we loaded the state before the Pi restarted.
    else:
        # measure tare and save the value as offset for current channel
        # and gain selected. That means channel A and gain 128
        err = hx.zero()
        # check if successful
        if err:
            raise ValueError('Tare is unsuccessful.')

        reading = hx.get_raw_data_mean(30)
        if reading:  # always check if you get correct value or only False
            # now the value is close to 0
            print('Data subtracted by offset but still not converted to units:',
                  reading)
        else:
            print('invalid data', reading)

        # In order to calculate the conversion ratio to some units, in my case I want grams,
        # you must have known weight.
        input('Put known weight on the scale and then press Enter')
        reading = hx.get_data_mean(30)
        if reading:
            print('Mean value from HX711 subtracted by offset:', reading)
            known_weight_grams = input(
                'Write how many grams it was and press Enter: ')
            try:
                value = float(known_weight_grams)
                print(value, 'grams')
            except ValueError:
                print('Expected integer or float and I have got:',
                      known_weight_grams)

            # set scale ratio for particular channel and gain which is
            # used to calculate the conversion to units. Required argument is only
            # scale ratio. Without arguments 'channel' and 'gain_A' it sets
            # the ratio for current channel and gain.
            ratio = reading / value  # calculate the ratio for channel A and gain 128
            hx.set_scale_ratio(ratio)  # set ratio for current channel
            print('Ratio is set.')
        else:
            raise ValueError(
                'Cannot calculate mean value. Try debug mode. Variable reading:',
                reading)

        # This is how you can save the ratio and offset in order to load it later.
        # If Raspberry Pi unexpectedly powers down, load the settings.
        print('Saving the HX711 state to swap file on persistant memory')
        with open(swap_file_name, 'wb') as swap_file:
            pickle.dump(hx, swap_file)
            swap_file.flush()
            os.fsync(swap_file.fileno())
            # you have to flush, fsynch and close the file all the time.
            # This will write the file to the drive. It is slow but safe.

    # Read data several times and return mean value
    # subtracted by offset and converted by scale ratio to
    # desired units. In my case in grams.
    print("Now, I will read data in infinite loop. To exit press 'CTRL + C'")
    input('Press Enter to begin reading')
    while True:
        print(hx.get_weight_mean(30), 'g')

except (KeyboardInterrupt, SystemExit):
    print('Bye :)')

finally:
    GPIO.cleanup()

